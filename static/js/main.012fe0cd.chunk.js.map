{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","initialState","status","query","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoItem","id","title","completed","dispatch","className","cn","onClick","currentTodoActions","TodoList","filteredTodos","useMemo","queryLower","toLowerCase","trim","todosToFilter","includes","length","map","TodoFilter","onSubmit","event","preventDefault","onChange","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","userId","useState","isLoading","setIsLoading","user","setUser","useEffect","getUser","finally","href","email","name","App","todosFromServer","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.012fe0cd.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = {\n  type: 'currentTodo/REMOVE';\n};\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({\n  type: 'currentTodo/REMOVE',\n});\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n    case 'currentTodo/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/SETQUERY',\n  payload: string,\n};\ntype SetStatusAction = {\n  type: 'filter/SETSTATUS',\n  payload: Status,\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SETQUERY',\n  payload: query,\n});\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SETSTATUS',\n  payload: status,\n});\n\ntype State = {\n  status: Status,\n  query: string,\n};\ntype Action = SetQueryAction | SetStatusAction;\n\nconst initialState = {\n  status: 'all' as Status,\n  query: '',\n};\n\nconst filterReducer = (\n  state: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/SETQUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case 'filter/SETSTATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setQuery, setStatus };\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: SetAction,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...state, ...action.payload];\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setTodos };\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const { id, title, completed } = todo;\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const handleClick = () => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={cn({\n        'has-background-info-light': currentTodo?.id === id,\n      })}\n    >\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p className={completed ? 'has-text-success' : 'has-text-danger'}>\n          {title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={handleClick}\n        >\n          <span className=\"icon\">\n            <i className={`far ${currentTodo?.id === todo.id ? 'fa-eye-slash' : 'fa-eye'}`} />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport { useAppSelector } from '../../app/hooks';\nimport { TodoItem } from '../TodoItem';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const filter = useAppSelector(state => state.filter);\n  const filteredTodos = useMemo(() => {\n    const queryLower = filter.query.toLowerCase().trim();\n    let todosToFilter = [...todos];\n\n    if (filter.query) {\n      todosToFilter = todosToFilter.filter(todo => todo.title.toLowerCase().includes(queryLower));\n    }\n\n    if (filter.status !== 'all') {\n      todosToFilter = todosToFilter.filter(todo => {\n        switch (filter.status) {\n          case 'active':\n            return !todo.completed;\n          case 'completed':\n            return todo.completed;\n          default:\n            return todo.completed;\n        }\n      });\n    }\n\n    return todosToFilter;\n  }, [filter.query, filter.status]);\n\n  return (\n    <>\n      {!filteredTodos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.map(todo => (\n              <TodoItem key={todo.id} todo={todo} />\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const handleChangeSelected = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => (\n    dispatch(actions.setStatus(event.target.value as Status))\n  );\n  const { query } = useAppSelector(state => state.filter);\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(actions.setQuery(event.target.value));\n  };\n\n  const handleQueryClear = () => {\n    dispatch(actions.setQuery(''));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select data-cy=\"statusSelect\" onChange={handleChangeSelected}>\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {!!query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleQueryClear}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const todo = useAppSelector(state => state.currentTodo) as Todo;\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = todo;\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState<User>();\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getUser(userId)\n      .then(setUser)\n      .finally(() => setIsLoading(false));\n  }, [todo]);\n\n  const handleCloseClicked = () => {\n    dispatch(actions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? <Loader /> : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleCloseClicked}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { actions as todosActions } from './features/todos';\nimport { useAppSelector, useAppDispatch } from './app/hooks';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then((todosFromServer) => dispatch(todosActions.setTodos(todosFromServer)))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? <Loader />\n                : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}